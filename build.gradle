import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

import java.time.LocalTime

plugins {
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
	id 'java'
	id 'application'
}

configurations {
    testImplementation.extendsFrom testShadow
}

application {
	mainClass = "ch.njol.skript.Main"
}

allprojects {
	repositories {
		mavenCentral()
		maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://repo.papermc.io/repository/maven-public/' }
		maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' } // needed for paper adventure snapshot
		maven { url 'https://ci.emc.gs/nexus/content/groups/aikar/' }
	}
}

dependencies {
	shadow group: 'org.bstats', name: 'bstats-bukkit', version: '3.0.2'
	shadow group: 'net.kyori', name: 'adventure-text-serializer-bungeecord', version: '4.3.2'

	shadow group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.700'
	shadow group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'
	shadow group: "com.google.code.gson", name: "gson", version: "2.8.0"
	shadow "com.google.guava:guava:21.0"
	shadow "com.googlecode.json-simple:json-simple:1.1.1"
	shadow "commons-lang:commons-lang:2.6"
	shadow "org.yaml:snakeyaml:1.23"

//	implementation fileTree(dir: 'lib', include: '*.jar')

//	testShadow group: 'junit', name: 'junit', version: '4.13.2'
//	testShadow group: 'org.easymock', name: 'easymock', version: '5.0.1'
}

task checkAliases {
	description 'Checks for the existence of the aliases.'
	doLast {
		def aliasFolder = project.file('skript-aliases')
		if (!aliasFolder.exists() || aliasFolder.listFiles().length == 0) {
			throw new InvalidUserDataException('Aliases are missing from \'skript-aliases\' folder. Consider fetching submodules with \'git submodule update --init\'.')
		}
	}
}

task jar(overwrite: true, type: ShadowJar) {
	dependsOn checkAliases
	archiveFileName = jarName ? 'Skript-' + project.version + '.jar' : jarName
	from sourceSets.main.output
}

task build(overwrite: true, type: ShadowJar) {
	archiveFileName = jarName ? 'Skript-' + project.version + '.jar' : jarName
	from sourceSets.main.output
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = 'sources'
}

tasks.withType(ShadowJar) {
	configurations = [
		project.configurations.shadow
	]
	dependencies {
		include(dependency('org.bstats:bstats-bukkit'))
		include(dependency('org.bstats:bstats-base'))
		include(dependency('net.kyori:adventure-text-serializer-bungeecord'))
		include(dependency('org.eclipse.jdt:org'))
		include(dependency('com.google.code.findbugs:findbugs'))
		include(dependency('com.google.code.gson:gson'))
		include(dependency("com.google.guava:guava"))
		include(dependency("com.googlecode.json-simple:json-simple"))
		include(dependency("commons-lang:commons-lang"))
		include(dependency("org.yaml:snakeyaml"))
	}
//	relocate 'io.papermc.lib', 'ch.njol.skript.paperlib'
	relocate 'org.bstats', 'ch.njol.skript.bstats'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
	from 'skript-aliases', {
		into 'aliases-english' // Change this if we get aliases in other languages
	}
}

processResources {
	filter ReplaceTokens, tokens: [
		'version'         : project.property('version'),
		'today'           : 'unknown', // Don't leak information about system this was built on
		'release-flavor'  : 'selfbuilt-unknown', // Note: 'selfbuilt' prefix makes updater report a custom build
		'release-channel' : 'none', // No updates, so anything else wouldn't make sense
		'release-updater' : 'ch.njol.skript.update.NoUpdateChecker', // Disable update checking
		'release-source'  : '',
		'release-download': 'null'
	]
}

enum Modifiers {
	DEV_MODE, GEN_NIGHTLY_DOCS, GEN_RELEASE_DOCS, DEBUG, PROFILE, JUNIT
}

def java21 = 21
def java17 = 17
def java11 = 11

def latestEnv = 'java21/paper-1.21.0.json'
def latestJava = java21
def oldestJava = java11

def latestJUnitEnv = 'java17/paper-1.20.4.json'
def latestJUnitJava = java17

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(latestJava))
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ['-source', '' + oldestJava, '-target', '' + oldestJava]
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// Build flavor configurations
task githubResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		version = project.property('version')
		def channel = 'stable'
		if (version.contains('-'))
			channel = 'prerelease'
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-github', // SkriptLang build, distributed on Github
			'release-channel' : channel, // Release channel, see above
			'release-updater' : 'ch.njol.skript.update.GithubChecker', // Github API client
			'release-source'  : 'https://api.github.com/repos/SkriptLang/Skript/releases', // Github API URL
			'release-download': 'null' // Update checker will figure it out
		]
	}
	into 'build/resources/main'
}

task githubRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn githubResources
	archiveFileName = 'Skript-' + version +'.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}

task spigotResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		version = project.property('version')
		def channel = 'stable'
		if (version.contains('-'))
			channel = 'prerelease'
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-spigot', // SkriptLang build, distributed on Spigot resources
			'release-channel' : channel, // Release channel, see above
			'release-updater' : 'ch.njol.skript.update.GithubChecker', // Github API client
			'release-source'  : 'https://api.github.com/repos/SkriptLang/Skript/releases', // Github API URL
			'release-download': '\'http://example.com\'' // TODO insert Spigot URL
		]
	}
	into 'build/resources/main'
}

task spigotRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn spigotResources
	archiveFileName = 'Skript-spigot.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}

task nightlyResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		def hash = 'git rev-parse --short HEAD'.execute().text.trim()
		version = project.property('version') + '-nightly-' + hash
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-nightly', // SkriptLang build, automatically done by CI
			'release-channel' : 'prerelease', // No update checking, but these are VERY unstable
			'release-updater' : 'ch.njol.skript.update.NoUpdateChecker', // No auto updates for now
			'release-source'  : '',
			'release-download': 'null'
		]
	}
	into 'build/resources/main'
}

task nightlyRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn nightlyResources
	archiveFileName = 'Skript-nightly.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}

javadoc {
	mustRunAfter(tasks.withType(ProcessResources))
	title = 'Skript ' + project.property('version')
	source = sourceSets.main.allJava

	exclude("ch/njol/skript/conditions/**")
	exclude("ch/njol/skript/expressions/**")
	exclude("ch/njol/skript/effects/**")
	exclude("ch/njol/skript/events/**")
	exclude("ch/njol/skript/sections/**")
	exclude("ch/njol/skript/structures/**")
	exclude("ch/njol/skript/lang/function/EffFunctionCall.java")
	exclude("ch/njol/skript/lang/function/ExprFunctionCall.java")
	exclude("ch/njol/skript/hooks/**")
	exclude("ch/njol/skript/test/**")

	classpath = configurations.compileClasspath + sourceSets.main.output
	options.encoding = 'UTF-8'
	// currently our javadoc has a lot of errors, so we need to suppress the linter
	options.addStringOption('Xdoclint:none', '-quiet')
}
